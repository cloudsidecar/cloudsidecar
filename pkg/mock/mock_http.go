// Code generated by MockGen. DO NOT EDIT.
// Source: /tmp/moo.go

// Package mock_http is a generated GoMock package.
package mock

import (
	bufio "bufio"
	gomock "github.com/golang/mock/gomock"
	net "net"
	x "net/http"
	reflect "reflect"
)

// MockHandler is a mock of Handler interface
type MockHandler struct {
	ctrl     *gomock.Controller
	recorder *MockHandlerMockRecorder
}

// MockHandlerMockRecorder is the mock recorder for MockHandler
type MockHandlerMockRecorder struct {
	mock *MockHandler
}

// NewMockHandler creates a new mock instance
func NewMockHandler(ctrl *gomock.Controller) *MockHandler {
	mock := &MockHandler{ctrl: ctrl}
	mock.recorder = &MockHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockHandler) EXPECT() *MockHandlerMockRecorder {
	return m.recorder
}

// ServeHTTP mocks base method
func (m *MockHandler) ServeHTTP(arg0 x.ResponseWriter, arg1 *x.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ServeHTTP", arg0, arg1)
}

// ServeHTTP indicates an expected call of ServeHTTP
func (mr *MockHandlerMockRecorder) ServeHTTP(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServeHTTP", reflect.TypeOf((*MockHandler)(nil).ServeHTTP), arg0, arg1)
}

// MockResponseWriter is a mock of ResponseWriter interface
type MockResponseWriter struct {
	ctrl     *gomock.Controller
	recorder *MockResponseWriterMockRecorder
}

// MockResponseWriterMockRecorder is the mock recorder for MockResponseWriter
type MockResponseWriterMockRecorder struct {
	mock *MockResponseWriter
}

// NewMockResponseWriter creates a new mock instance
func NewMockResponseWriter(ctrl *gomock.Controller) *MockResponseWriter {
	mock := &MockResponseWriter{ctrl: ctrl}
	mock.recorder = &MockResponseWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockResponseWriter) EXPECT() *MockResponseWriterMockRecorder {
	return m.recorder
}

// Header mocks base method
func (m *MockResponseWriter) Header() x.Header {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(x.Header)
	return ret0
}

// Header indicates an expected call of Header
func (mr *MockResponseWriterMockRecorder) Header() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockResponseWriter)(nil).Header))
}

// Write mocks base method
func (m *MockResponseWriter) Write(arg0 []byte) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Write", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Write indicates an expected call of Write
func (mr *MockResponseWriterMockRecorder) Write(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Write", reflect.TypeOf((*MockResponseWriter)(nil).Write), arg0)
}

// WriteHeader mocks base method
func (m *MockResponseWriter) WriteHeader(statusCode int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "WriteHeader", statusCode)
}

// WriteHeader indicates an expected call of WriteHeader
func (mr *MockResponseWriterMockRecorder) WriteHeader(statusCode interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteHeader", reflect.TypeOf((*MockResponseWriter)(nil).WriteHeader), statusCode)
}

// MockFlusher is a mock of Flusher interface
type MockFlusher struct {
	ctrl     *gomock.Controller
	recorder *MockFlusherMockRecorder
}

// MockFlusherMockRecorder is the mock recorder for MockFlusher
type MockFlusherMockRecorder struct {
	mock *MockFlusher
}

// NewMockFlusher creates a new mock instance
func NewMockFlusher(ctrl *gomock.Controller) *MockFlusher {
	mock := &MockFlusher{ctrl: ctrl}
	mock.recorder = &MockFlusherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockFlusher) EXPECT() *MockFlusherMockRecorder {
	return m.recorder
}

// Flush mocks base method
func (m *MockFlusher) Flush() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Flush")
}

// Flush indicates an expected call of Flush
func (mr *MockFlusherMockRecorder) Flush() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Flush", reflect.TypeOf((*MockFlusher)(nil).Flush))
}

// MockHijacker is a mock of Hijacker interface
type MockHijacker struct {
	ctrl     *gomock.Controller
	recorder *MockHijackerMockRecorder
}

// MockHijackerMockRecorder is the mock recorder for MockHijacker
type MockHijackerMockRecorder struct {
	mock *MockHijacker
}

// NewMockHijacker creates a new mock instance
func NewMockHijacker(ctrl *gomock.Controller) *MockHijacker {
	mock := &MockHijacker{ctrl: ctrl}
	mock.recorder = &MockHijackerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockHijacker) EXPECT() *MockHijackerMockRecorder {
	return m.recorder
}

// Hijack mocks base method
func (m *MockHijacker) Hijack() (net.Conn, *bufio.ReadWriter, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Hijack")
	ret0, _ := ret[0].(net.Conn)
	ret1, _ := ret[1].(*bufio.ReadWriter)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Hijack indicates an expected call of Hijack
func (mr *MockHijackerMockRecorder) Hijack() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Hijack", reflect.TypeOf((*MockHijacker)(nil).Hijack))
}

// MockCloseNotifier is a mock of CloseNotifier interface
type MockCloseNotifier struct {
	ctrl     *gomock.Controller
	recorder *MockCloseNotifierMockRecorder
}

// MockCloseNotifierMockRecorder is the mock recorder for MockCloseNotifier
type MockCloseNotifierMockRecorder struct {
	mock *MockCloseNotifier
}

// NewMockCloseNotifier creates a new mock instance
func NewMockCloseNotifier(ctrl *gomock.Controller) *MockCloseNotifier {
	mock := &MockCloseNotifier{ctrl: ctrl}
	mock.recorder = &MockCloseNotifierMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCloseNotifier) EXPECT() *MockCloseNotifierMockRecorder {
	return m.recorder
}

// CloseNotify mocks base method
func (m *MockCloseNotifier) CloseNotify() <-chan bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseNotify")
	ret0, _ := ret[0].(<-chan bool)
	return ret0
}

// CloseNotify indicates an expected call of CloseNotify
func (mr *MockCloseNotifierMockRecorder) CloseNotify() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseNotify", reflect.TypeOf((*MockCloseNotifier)(nil).CloseNotify))
}

// MockcloseWriter is a mock of closeWriter interface
type MockcloseWriter struct {
	ctrl     *gomock.Controller
	recorder *MockcloseWriterMockRecorder
}

// MockcloseWriterMockRecorder is the mock recorder for MockcloseWriter
type MockcloseWriterMockRecorder struct {
	mock *MockcloseWriter
}

// NewMockcloseWriter creates a new mock instance
func NewMockcloseWriter(ctrl *gomock.Controller) *MockcloseWriter {
	mock := &MockcloseWriter{ctrl: ctrl}
	mock.recorder = &MockcloseWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockcloseWriter) EXPECT() *MockcloseWriterMockRecorder {
	return m.recorder
}

// CloseWrite mocks base method
func (m *MockcloseWriter) CloseWrite() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseWrite")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseWrite indicates an expected call of CloseWrite
func (mr *MockcloseWriterMockRecorder) CloseWrite() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseWrite", reflect.TypeOf((*MockcloseWriter)(nil).CloseWrite))
}
